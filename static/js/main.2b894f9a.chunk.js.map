{"version":3,"sources":["store/reducers/app.tsx","store/reducers/repos.tsx","store/reducers/branches.tsx","store/reducers/commits.tsx","store/reducers/index.tsx","store/index.tsx","utils/fetch.tsx","Providers.tsx","components/Loader/index.tsx","containers/App/index.tsx","store/actions/repo.tsx","store/actions/branch.tsx","containers/Body/index.tsx","Router.tsx","serviceWorker.ts","index.tsx","store/actions/app.tsx"],"names":["reducer","state","loading","refreshing","user","repo","branch","action","type","payload","combineReducers","app","repos","branches","commits","createStore","reducers","applyMiddleware","thunk","fetch","axios","create","baseURL","process","headers","interceptors","request","use","config","store","dispatch","load","params","t","Date","now","response","res","error","Promise","reject","Providers","children","Loader","props","className","style","height","role","width","defaultProps","App","useSelector","getRepos","getState","a","async","get","data","getBranches","Body","useDispatch","useState","setUser","useEffect","length","find","full_name","updateApp","name","placeholder","value","onChange","event","target","map","key","node_id","onClick","Math","random","disabled","Commits","lazy","Router","component","fallback","render","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","count","setTimeout"],"mappings":"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","file":"static/js/main.2b894f9a.chunk.js","sourcesContent":["import { Reducer } from \"redux\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\n\r\nconst reducer: Reducer<AppState, PayloadAction<AppState>> = (\r\n  state = {\r\n    loading: 0,\r\n    refreshing: 0,\r\n    user: \"theteam247\",\r\n    repo: \"theteam247/Crossroads-Group\",\r\n    branch: \"master\"\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"app/save\":\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Reducer } from \"redux\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\n\r\nconst reducer: Reducer<ReposState, PayloadAction<ReposState>> = (\r\n  state = {},\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"repos/save\":\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      } as ReposState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Reducer } from \"redux\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\n\r\nconst reducer: Reducer<BranchesState, PayloadAction<BranchesState>> = (\r\n  state = {},\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"branches/save\":\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      } as BranchesState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Reducer } from \"redux\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\n\r\nconst reducer: Reducer<CommitsState, PayloadAction<CommitsState>> = (\r\n  state = {},\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"commits/save\":\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      } as CommitsState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport app from \"./app\";\r\nimport repos from \"./repos\";\r\nimport branches from \"./branches\";\r\nimport commits from \"./commits\";\r\n\r\nexport default combineReducers({\r\n  app,\r\n  repos,\r\n  branches,\r\n  commits\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"store/reducers\";\r\n\r\nexport default createStore(reducers, applyMiddleware(thunk));\r\n","// import path from \"path\";\r\nimport store from \"store\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { load } from \"store/actions/app\";\r\n\r\nexport const fetch = axios.create({\r\n  baseURL: process.env.REACT_APP_API,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nfetch.interceptors.request.use(config => {\r\n  store.dispatch(load(1) as any);\r\n  config.params = {\r\n    t: Date.now(),\r\n    ...config.params\r\n  };\r\n  return config;\r\n});\r\n\r\nfetch.interceptors.response.use(\r\n  res => {\r\n    store.dispatch(load(-1) as any);\r\n    return res;\r\n  },\r\n  (error: AxiosError) => {\r\n    store.dispatch(load(-1) as any);\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default fetch;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"store\";\r\n\r\nexport interface ProvidersProps {}\r\n\r\nexport const Providers: React.FC<PropsWithChildren<ProvidersProps>> = ({\r\n  children\r\n}) => {\r\n  return <Provider store={store}>{children}</Provider>;\r\n};\r\n\r\nexport default Providers;\r\n","import React, { FC } from \"react\";\r\n\r\nexport interface LoaderProps {}\r\n\r\nexport const Loader: FC<LoaderProps> = props => {\r\n  return (\r\n    <div\r\n      className=\"fixed-top rounded-0 progress\"\r\n      style={{\r\n        height: 4\r\n      }}\r\n    >\r\n      <div\r\n        className=\"progress-bar progress-bar-striped progress-bar-animated\"\r\n        role=\"progressbar\"\r\n        style={{\r\n          width: \"100%\"\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nLoader.defaultProps = {};\r\n\r\nexport default Loader;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Loader from \"components/Loader\";\r\n\r\nexport interface AppProps {}\r\n\r\nexport const App: FC<AppProps> = ({ children }) => {\r\n  const app = useSelector<State, AppState>(state => state.app);\r\n\r\n  return (\r\n    <>\r\n      {app.loading > 0 && <Loader />}\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nApp.defaultProps = {};\r\n\r\nexport default App;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\nimport fetch from \"utils/fetch\";\r\n\r\nexport const getRepos = (): ThunkAction<\r\n  Promise<Repo[] | null>,\r\n  State,\r\n  any,\r\n  PayloadAction<ReposState>\r\n> => {\r\n  return async (dispatch, getState) => {\r\n    const { app } = getState();\r\n    const res = await fetch.get<Repo[]>(\r\n      `${process.env.REACT_APP_API}/users/${app.user}/repos`\r\n    );\r\n\r\n    dispatch({\r\n      type: \"repos/save\",\r\n      payload: {\r\n        [app.user]: res.data\r\n      }\r\n    });\r\n\r\n    return res.data;\r\n  };\r\n};\r\n\r\nexport default {\r\n  getRepos\r\n};\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\nimport fetch from \"utils/fetch\";\r\n\r\nexport const getBranches = (): ThunkAction<\r\n  any,\r\n  State,\r\n  any,\r\n  PayloadAction<BranchesState>\r\n> => {\r\n  return async (dispatch, getState) => {\r\n    const { app } = getState();\r\n    const res = await fetch.get<Branch[]>(\r\n      `${process.env.REACT_APP_API}/repos/${app.repo}/branches`\r\n    );\r\n\r\n    dispatch({\r\n      type: \"branches/save\",\r\n      payload: {\r\n        [app.repo]: res.data\r\n      }\r\n    });\r\n\r\n    return res.data;\r\n  };\r\n};\r\n\r\nexport default {\r\n  getBranches\r\n};\r\n","import React, { FC, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getRepos } from \"store/actions/repo\";\r\nimport { updateApp } from \"store/actions/app\";\r\nimport { getBranches } from \"store/actions/branch\";\r\n\r\nexport interface BodyProps {}\r\n\r\nconst Body: FC<BodyProps> = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const app = useSelector<State, AppState>(state => state.app);\r\n  const repos = useSelector<State, ReposState>(state => state.repos);\r\n  const branches = useSelector<State, BranchesState>(state => state.branches);\r\n\r\n  const [user, setUser] = useState(app.user);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const repos: Repo[] = (await dispatch(getRepos())) as any;\r\n      if (repos.length && !repos.find(repo => repo.full_name === app.repo)) {\r\n        dispatch(\r\n          updateApp({\r\n            repo: repos[0].full_name\r\n          })\r\n        );\r\n      }\r\n    })();\r\n  }, [dispatch, app.user, app.repo]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const branches: Branch[] = (await dispatch(getBranches())) as any;\r\n      if (\r\n        branches.length &&\r\n        !branches.find(branch => branch.name === app.branch)\r\n      ) {\r\n        dispatch(\r\n          updateApp({\r\n            branch: branches[0].name\r\n          })\r\n        );\r\n      }\r\n    })();\r\n  }, [dispatch, app.repo, app.branch]);\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      <div className=\"input-group my-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"User\"\r\n          value={user}\r\n          onChange={event => setUser(event.target.value)}\r\n        />\r\n        <select\r\n          className=\"form-control\"\r\n          placeholder=\"Repo\"\r\n          value={app.repo}\r\n          onChange={event => {\r\n            dispatch(\r\n              updateApp({\r\n                repo: event.target.value\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {repos?.[app.user]?.map(repo => (\r\n            <option key={repo.node_id} value={repo.full_name}>\r\n              {repo.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select\r\n          className=\"form-control\"\r\n          placeholder=\"Branch\"\r\n          value={app.branch}\r\n          onChange={event => {\r\n            dispatch(\r\n              updateApp({\r\n                branch: event.target.value\r\n              })\r\n            );\r\n          }}\r\n        >\r\n          {branches?.[app.repo]?.map(branch => (\r\n            <option key={branch.name} value={branch.name}>\r\n              {branch.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <div className=\"input-group-append\">\r\n          <button\r\n            className=\"btn btn-primary\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              dispatch(\r\n                updateApp({\r\n                  refreshing: Math.random(),\r\n                  user\r\n                })\r\n              );\r\n            }}\r\n            disabled={!!app.loading}\r\n          >\r\n            Refresh\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {children}\r\n    </main>\r\n  );\r\n};\r\n\r\nBody.defaultProps = {};\r\n\r\nexport default Body;\r\n","import React, { FC, Suspense, lazy } from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport App from \"containers/App\";\r\nimport Body from \"containers/Body\";\r\nimport Loader from \"components/Loader\";\r\n\r\n// pages\r\nconst Commits = lazy(() => import(\"pages/Commits\"));\r\n\r\nexport interface RouterProps {}\r\n\r\nconst Router: FC<RouterProps> = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Route component={App} />\r\n      <Suspense fallback={<Loader />}>\r\n        <Route\r\n          render={props => (\r\n            <Body {...props}>\r\n              <Switch>\r\n                <Route exact path=\"/commits\" component={Commits} />\r\n                <Redirect to=\"/commits\" />\r\n              </Switch>\r\n            </Body>\r\n          )}\r\n        ></Route>\r\n      </Suspense>\r\n    </HashRouter>\r\n  );\r\n};\r\n\r\nRouter.defaultProps = {};\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport Providers from \"Providers\";\nimport Router from \"Router\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Providers>\n    <Router />\n  </Providers>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { PayloadAction } from \"store/types/payload-action\";\r\n\r\nexport const updateApp = (\r\n  data: Partial<AppState>\r\n): ThunkAction<any, State, any, PayloadAction<AppState>> => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: \"app/save\",\r\n      payload: data\r\n    });\r\n  };\r\n};\r\n\r\nexport const load = (\r\n  count: number\r\n): ThunkAction<any, State, any, PayloadAction<AppState>> => {\r\n  return async (dispatch, getState) => {\r\n    setTimeout(() => {\r\n      const { app } = getState();\r\n      const loading = app.loading + count;\r\n\r\n      dispatch({\r\n        type: \"app/save\",\r\n        payload: {\r\n          loading: loading > 0 ? loading : 0\r\n        }\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nexport default {\r\n  updateApp,\r\n  load\r\n};\r\n"],"sourceRoot":""}